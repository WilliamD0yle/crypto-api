{"version":3,"sources":["reducers/characters.js","reducers/episodes.js","reducers/rootReducer.js","store/index.js","actions/index.js","components/CharacterCell/index.js","components/EpisodeCell/index.js","components/Banner/index.js","components/App/index.js","components/Character/index.js","components/Episode/index.js","routes.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","characters","selectedCharacter","page","selected","episodes","selectedEpisode","combineReducers","state","action","type","payload","store","createStore","rootReducer","applyMiddleware","thunk","rickAndMortyUrl","apiRequest","url","a","axios","get","then","response","catch","error","contentRow","title","body","className","ImageCell","props","key","id","to","src","image","alt","name","gender","species","status","location","EpisodeCell","episode","air_date","created","Banner","connect","charactersSelected","characterPage","episodesSelected","episodePage","dispatch","getAll","characterResults","episodeResults","forEach","result","data","results","updateSelected","getMore","getState","toUpperCase","selectedTab","useEffect","length","setTimeout","window","addEventListener","e","handleScroll","removeEventListener","innerHeight","scrollY","document","offsetHeight","onClick","classNames","tabSelected","map","CharacterCell","character","getCharacterInfo","characterDetails","match","params","origin","getEpisodeInfo","season","process","episodeDetails","substring","still_path","overview","season_number","episode_number","vote_average","Routes","exact","path","component","App","Character","Episode","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b052e74.chunk.js","sourcesContent":["const INITIAL_STATE = {\n    characters: [],\n    selectedCharacter: { },\n    page: 2,\n    selected: true\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'CHARACTERS_LOADED':\n            return { ...state, characters: [...state.characters, ...action.payload]};\n        case 'CHARACTER_LOADED':\n            return { ...state, selectedCharacter: action.payload};\n        case 'CHARACTER_PAGE_UPDATED':\n            return { ...state, page: action.payload };\n        case 'SELECTED_UPDATED':\n            return { ...state, selected: !state.selected };\n        default:\n            return state;\n    }\n};\n","const INITIAL_STATE = {\n    episodes: [],\n    selectedEpisode: '',\n    page: 2,\n    selected: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'EPISODES_LOADED':\n            return { ...state, episodes: [...state.episodes, ...action.payload] };\n        case 'EPISODE_LOADED':\n            return { ...state, selectedEpisode: action.payload };\n        case 'EPISODE_PAGE_UPDATED':\n            return { ...state, page: action.payload };\n        case 'SELECTED_UPDATED':\n            return { ...state, selected: !state.selected };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport characters from './characters';\nimport episodes from './episodes';\n\nexport default combineReducers({\n    characters,\n    episodes\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/rootReducer';\n\nconst initialState = {};\n\nexport const store = createStore(\n    rootReducer,\n    initialState,\n    process.env.NODE_ENV === 'development'\n        ? composeWithDevTools(applyMiddleware(thunk))\n        : applyMiddleware(thunk)\n);\n\nexport const configureStore = () => {\n    return store;\n};\n","import axios from 'axios';\nimport { compose } from 'redux';\nlet rickAndMortyUrl = 'https://rickandmortyapi.com/api/';\nlet movieDb = 'https://api.themoviedb.org/3/tv/60625/';\n\nconst apiRequest = async url => {\n    return await axios.get(url)\n      .then(response => response)\n      .catch(error => { return { error } })\n}\n\nexport const getAll = () => async dispatch => {\n    const characterResults = await apiRequest(`${rickAndMortyUrl}character`);\n    const episodeResults = await apiRequest(`${rickAndMortyUrl}episode`);\n    const results = [\n        {\n            type: 'CHARACTERS',\n            response: characterResults\n        },\n        {\n            type: 'EPISODES',\n            response: episodeResults\n        }\n    ];\n\n    results.forEach(result => {\n        if (result.response.error) {\n            dispatch({\n                type: `${result.type}_ERROR`,\n                payload: result.response.error\n            });\n        }\n\n        dispatch({\n            type: `${result.type}_LOADED`,\n            payload: result.response.data.results\n        });\n    });\n}\n\nexport const getMore = (type, page) => async dispatch => {\n    const results = await apiRequest(`${rickAndMortyUrl}${type}/?page=${page}`);\n    if (!results.error) {\n        dispatch({\n            type: `${type.toUpperCase()}_PAGE_UPDATED`,\n            payload: page\n        });\n        dispatch({\n            type: `${type.toUpperCase()}S_LOADED`,\n            payload: results.data.results\n        });\n    }\n}\n\nexport const getCharacterInfo = id => async dispatch => {\n    const characterDetails = await apiRequest(`${rickAndMortyUrl}character/${id}`);\n\n    dispatch({\n        type: 'CHARACTER_LOADED',\n        payload: characterDetails.data\n    });\n};\n\nexport const getEpisodeInfo = (season, episode) => async dispatch => {\n    const url = `${movieDb}season/${season}/episode/${episode}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\n    const episodeDetails = await apiRequest(url);\n\n    dispatch({\n        type: 'EPISODE_LOADED',\n        payload: episodeDetails.data\n    });\n};\n\nexport const updateSelected = () => dispatch => {\n    dispatch({\n        type: 'SELECTED_UPDATED'\n    });\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './CharacterCell.css';\n\nconst contentRow = (title, body) => (\n    <div className=\"content-row\">\n        <div className=\"content-column\">\n            <p className=\"cell-text left\">{title}</p>\n        </div>\n        <div className=\"content-column\">\n            <p className=\"cell-text right\">{body}</p>\n        </div>\n    </div>\n);\n\nconst ImageCell = props => {\n    return (\n        <div className=\"ImageCell\" key={props.id}>\n            <Link to={`/character/${props.id}`}>\n                <div className=\"image-container\">\n                    <img src={props.image} alt={props.name} />\n                </div>\n            </Link>\n            {contentRow('Name', props.name)}\n            {contentRow('Gender', props.gender)}\n            {contentRow('Species', props.species)}\n            {contentRow('Status', props.status)}\n            {contentRow('Location', props.location.name)}\n        </div>\n    )\n};\n\nexport default ImageCell;\n","import React, {} from 'react';\nimport { Link } from 'react-router-dom';\nimport './EpisodeCell.css';\n\nconst EpisodeCell = props => (\n    <Link to={`/episode/${props.episode}`} key={`10${props.id}`}>\n        <div className=\"EpisodeCell\">\n            <div className=\"episode-cell\">\n                <p>Name: {props.name}</p>\n                <p>Episode: {props.episode}</p>\n                <p>Air date: {props.air_date}</p>\n                <p>Created: {props.created}</p>\n            </div>\n        </div>\n    </Link>\n);\n\nexport default EpisodeCell;\n","import React from 'react';\nimport './Banner.css';\n\nconst Banner = props => (\n    <header className=\"App-header\">\n        <h1 className=\"App-header-title\">{props.title}</h1>\n    </header>\n);\n\nexport default Banner;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { getAll, getMore, updateSelected } from '../../actions/';\nimport { store } from '../../store/';\nimport CharacterCell from '../CharacterCell';\nimport EpisodeCell from '../EpisodeCell';\nimport Banner from '../Banner';\nimport './App.css';\n\nexport const App = props => {\n    let selectedTab = props.charactersSelected ? 'character' : 'episode';\n  \n    useEffect(() => {\n        if (props.episodes.length === 0 && props.characters.length === 0) {\n        props.getAll();\n        }\n        setTimeout(() => {\n        window.addEventListener('scroll', e => handleScroll(e, selectedTab));\n        }, 3000);\n\n        return () => {\n        window.removeEventListener('scroll', () => {})\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleScroll = (e, selectedTab) => {\n        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n        props.getMore();\n        }\n    }\n\n    return (\n        <div className=\"App\">\n        <Banner\n            title=\"Rick And Morty Api\"\n        />\n        <div className=\"main\">\n            <div className=\"tab-selection\">\n            <p\n                onClick={selectedTab !== 'character' ? props.updateSelected : null}\n                className={classNames(\"tab\", { tabSelected: selectedTab === 'character'})}\n            >\n                Characters\n            </p>\n            <p\n                onClick={selectedTab !== 'episode' ? props.updateSelected : null}\n                className={classNames(\"tab\", { tabSelected: selectedTab === 'episode'})}\n            >\n                Episodes\n            </p>\n            </div>\n            <div className=\"tab-content\">\n            { props.charactersSelected ? props.characters.map(CharacterCell) : null }\n            { props.episodesSelected ? props.episodes.map(EpisodeCell) : null }\n            </div>\n        </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    charactersSelected: state.characters.selected,\n    characters: state.characters.characters,\n    characterPage: state.characters.page,\n    episodesSelected: state.episodes.selected,\n    episodes: state.episodes.episodes,\n    episodePage: state.episodes.page\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getAll: () => dispatch(getAll()),\n    updateSelected: () => dispatch(updateSelected()),\n    getMore: () => {\n        let state = store.getState();\n        let type = state.characters.selected ? 'character' : 'episode';\n        let page = type === 'character' ? state.characters.page : state.episodes.page;\n        page++\n        dispatch(getMore(type, page))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getCharacterInfo } from '../../actions/';\nimport Banner from '../Banner';\nimport './Character.css';\n\nexport const Character = props => {\n    const id = props.match.params.id;\n    useEffect(() => {\n        props.getCharacterInfo(id);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"Character\">\n            <Banner\n                title=\"Character Profile\"\n            />\n            <div className=\"character-main\">\n                {\n                    props.character.id ? (\n                        <div className=\"character-content\">\n                            <div className=\"character-image\">\n                                <img src={props.character.image} alt={props.character.name} />\n                            </div>\n                            <div className=\"character-details\">\n                                <p>Id: {props.character.id}</p>\n                                <p>Name: {props.character.name}</p>\n                                <p>Status: {props.character.status}</p>\n                                <p>Species: {props.character.species}</p>\n                                <p>Gender: {props.character.gender}</p>\n                                <p>Created: {props.character.created}</p>\n                                <p>Location: {props.character.location.name}</p>\n                                <p>Origin: {props.character.origin.name}</p>\n                            </div>\n                        </div>\n                    )\n                    : \n                    'loading...'\n                }\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    character: state.characters.selectedCharacter\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getCharacterInfo: id => dispatch(getCharacterInfo(id))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Character);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getEpisodeInfo } from '../../actions';\nimport Banner from '../Banner';\nimport './Episode.css';\nconst imageUrl = 'https://image.tmdb.org/t/p/w500/';\n\nexport const Episode = props => {\n    const params = props.match.params.episode;\n    const season = params.substring(1, 3);\n    const episode = params.substring(4, 6);\n\n    useEffect(() => {\n        props.getEpisodeInfo(season, episode);\n        //  eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"Episode\">\n            <Banner\n                title=\"Episode Details\"\n            />\n            <div className=\"episode-main\">\n            {\n                props.episode.id ? (\n                    <div className=\"episode-container\">\n                        <div className=\"episode-image\">\n                            <img src={`${imageUrl}${props.episode.still_path}`} alt={props.episode.name} />\n                        </div>\n                        <div className=\"episode-details\">\n                            <p>{props.episode.name}</p>\n                            <p>{props.episode.overview}</p>\n                            <p>Id: {props.episode.id}</p>\n                            <p>Season: {props.episode.season_number}</p>\n                            <p>Episode: {props.episode.episode_number}</p>\n                            <p>Aired: {props.episode.air_date}</p>\n                            <p>Rating: {props.episode.vote_average}</p>\n                        </div>\n                    </div>\n                )\n                : \n                'loading...'\n            }\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    episode: state.episodes.selectedEpisode\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getEpisodeInfo: (season, episode) => dispatch(getEpisodeInfo(season, episode))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Episode);\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport App from './components/App';\nimport Character from './components/Character';\nimport Episode from './components/Episode';\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" component={App} />\n                <Route path={`/character/:id`} component={Character} />\n                <Route path='/episode/:episode' component={Episode} />\n                {/* <Route component={NoMatch} /> */}\n            </Switch>\n        </BrowserRouter>\n    );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <Routes />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}